//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.1

use async_graphql::Enum;
use sea_orm::entity::prelude::*;

#[derive(Clone, Copy, Enum, Debug, PartialEq, Eq)]
#[graphql(name = "CustomerDimension")]
pub enum Dimension {
    ProjectId,
}

impl ToString for Dimension {
    fn to_string(&self) -> String {
        match self {
            Self::ProjectId => String::from("mints.project_id"),
        }
    }
}

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "customers")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: Uuid,
    pub project_id: Uuid,
    pub timestamp: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

impl ActiveModelBehavior for ActiveModel {}
